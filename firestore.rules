rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function checkJobId( jobId ) {
        return (jobId is int && jobId > 0);
      }

    function checkJobIdAsId( jobId ) {
      return !(exists(/jobs/$(jobId)));
    }
    
    // For jobName, Location, Company, JobFieldCategory
    function checkNonEmptyString ( stringValue ) {
      return (stringValue is string && stringValue.size() > 0);
    }

    // For Salary
    function checkPositiveInt ( intValue ) {
      return (intValue is int && intValue > 0);
    }

    // For Type of Employment[and other Enumeration range]
    function checkEnumRange ( intValue, max ) {
      return (intValue is int && intValue > 0 && intValue < max);
    }

    // For Job Description
    function checkDescription ( desc ) {
      return ((desc is string && desc.size() > 0) || !("description" in request.resource.data));
    }

    match /jobs/{jobId} {
      allow read: if request.auth != null;
      
      allow create: if request.auth.token.email_verified == true;
                    // && checkJobId(request.resource.data.jobId) == true
                    // && checkJobIdAsId(request.resource.data.jobId) == true
                    // && checkNonEmptyString(request.resource.data.jobName) == true
                    // && checkNonEmptyString(request.resource.data.location) == true
                    // && checkNonEmptyString(request.resource.data.company) == true
                    // && checkNonEmptyString(request.resource.data.jobFieldCategory) == true
                    // && checkPositiveInt(request.resource.data.salary) == true
                    // && checkEnumRange(request.resource.data.typeOfEmployment, 3) == true
                    // && checkDescription(request.resource.data.description) == true;

      allow update: if request.auth.token.email_verified == true;
                    // && (request.resource.data.diff( resource.data).affectedKeys()
                    // .hasOnly(['jobName', 'location', 'company', 'jobFieldCategory', 'salary', 'typeOfEmployment', 'description']))
                    // && request.resource.data.description != null ?
                    //     checkDescription(request.resource.data.description) : true; 
      
      allow delete: if request.auth.token.email_verified == true;

      // allow write: if request.auth.token.email_verified == true;
      
    }

    // This rule allows anyone with your Firestore database reference to view, edit,
    // and delete all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Firestore database will be denied until you Update
    // your rules
    match /{document=**} {
      allow read, write: if request.time < timestamp.date(2023, 9, 22);
    }
  }
}